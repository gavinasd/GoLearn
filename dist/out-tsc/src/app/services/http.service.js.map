{"version":3,"file":"http.service.js","sourceRoot":"","sources":["../../../app/services/http.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport {Http, URLSearchParams, Headers, Response} from '@angular/http';\r\nimport { Observable, BehaviorSubject} from 'rxjs';\r\nimport 'rxjs/add/operator/toPromise';\r\nimport { environment} from \"../../environments/environment\";\r\n\r\n@Injectable()\r\nexport class HttpService {\r\n\r\n\tconstructor(private http:Http) {\r\n\r\n\t}\r\n\r\n\tpublic testReadOneUser(){\r\n\t\tthis.makeGetWithToken(\"http://localhost:3000/api/user/\"+this.getCurrentId())\r\n\t\t\t.subscribe((resp)=>{\r\n\t\t\t\tconsole.log(resp.json());\r\n\t\t\t\tconsole.log(JSON.stringify(resp.json()));\r\n\t\t\t});\r\n\t}\r\n\r\n\r\n\tpublic makeGetWithToken(url:string):Observable<Response>{\r\n\t\tvar header = new Headers();\r\n\t\theader.append('Authorization',\"Bearer \" + this.getToken());\r\n\t\treturn this.http.get(url,{headers:header});\r\n\t}\r\n\r\n\tpublic makePost(url:string, body:any):Observable<Response>{\r\n\t\tvar header = new Headers();\r\n\t\theader.append('Content-Type', 'application/json');\r\n\t\treturn this.http.post(url,body,\r\n\t\t\t{headers:header});\r\n\t}\r\n\r\n\tpublic makePostWithToken(url:string, body:any):Observable<Response>{\r\n\t\tvar header = new Headers();\r\n\t\theader.append('Content-Type', 'application/json');\r\n\t\theader.append('Authorization', 'Bearer ' + this.getToken());\r\n\t\treturn this.http.post(url,body,{headers:header});\r\n\t}\r\n\r\n\tpublic getToken():string{\r\n\t\treturn localStorage.getItem(\"auth_token\");\r\n\t}\r\n\r\n\tpublic setToken(token:string){\r\n\t\tlocalStorage.setItem(\"auth_token\",token);\r\n\t}\r\n\r\n\tpublic deleteToken(){\r\n\t\tlocalStorage.removeItem(\"auth_token\");\r\n\t}\r\n\r\n\tpublic getCurrentId():string{\r\n\t\treturn localStorage.getItem(\"current_id\");\r\n\t}\r\n\r\n\tpublic setCurrentId(id:string){\r\n\t\tlocalStorage.setItem('current_id', id);\r\n\t}\r\n\r\n\tpublic deleteCurrentId(){\r\n\t\tlocalStorage.removeItem('current_id');\r\n\t}\r\n\r\n\tpublic getCurrentUserName(){\r\n        return localStorage.getItem('current_name');\r\n\t}\r\n\r\n\tpublic setCurrentUserName(userName:string){\r\n        localStorage.setItem('current_name', userName);\r\n    }\r\n\r\n    public deleteUserName(){\r\n        localStorage.removeItem('current_name');\r\n    }\r\n\r\n\tpublic getUserType():string{\r\n\t\treturn localStorage.getItem(\"current_user_type\");\r\n\t}\r\n\r\n\tpublic setUserType(userType:string){\r\n\t\tlocalStorage.setItem('current_user_type', userType);\r\n\t}\r\n\r\n\tpublic deleteUserType(){\r\n\t\tlocalStorage.removeItem('current_user_type');\r\n\t}\r\n\r\n\tpublic isLoggedIn():boolean{\r\n\t\treturn this.getToken()? true:false;\r\n\t}\r\n\r\n\tpublic logout(){\r\n\t\tthis.deleteCurrentId();\r\n\t\tthis.deleteUserName();\r\n\t\tthis.deleteUserType();\r\n\t\tthis.deleteToken();\r\n\t}\r\n\r\n\tpublic static handleError(error: Response | any){\r\n\t\t// In a real world app, we might use a remote logging infrastructure\r\n\t\tlet errMsg: string;\r\n\t\tif (error instanceof Response) {\r\n\t\t\tconst body = error.json() || '';\r\n\t\t\tconst err = body.error || JSON.stringify(body.message) || JSON.stringify(body.errmsg);\r\n\t\t\terrMsg = `${error.statusText}:${err}`;\r\n\t\t} else {\r\n\t\t\terrMsg = error.message ? error.message : error.toString();\r\n\t\t}\r\n\t\tconsole.error(errMsg);\r\n\t\treturn Observable.throw(errMsg);\r\n\t}\r\n\r\n}\r\n"]}