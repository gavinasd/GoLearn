{"version":3,"file":"user.service.js","sourceRoot":"","sources":["../../../app/services/user.service.ts"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,EAAC,WAAW,EAAC,MAAM,gBAAgB,CAAC;AAG3C,OAAO,EAAC,WAAW,EAAC,MAAM,gCAAgC,CAAC;AAI3D,IAAa,WAAW;IAEvB,qBAAoB,WAAuB;QAAvB,gBAAW,GAAX,WAAW,CAAY;IAAI,CAAC;IAEzC,2BAAK,GAAZ,UAAa,KAAY,EAAE,QAAe;QAA1C,iBAkBC;QAjBA,OAAO,CAAC,GAAG,CAAC,qBAAqB,CAAC,CAAC;QACnC,IAAI,IAAqB,CAAC;QAC1B,IAAI,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC;YACzB,OAAO,EAAC,KAAK;YACb,UAAU,EAAC,QAAQ;SACnB,CAAC,CAAC;QACH,MAAM,CAAC,IAAI,CAAC,WAAW;aACrB,QAAQ,CAAC,WAAW,CAAC,QAAQ,EAAC,IAAI,CAAC;aACnC,GAAG,CAAC,UAAC,IAAI;YACR,KAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,KAAK,CAAC,CAAC;YAC7C,KAAI,CAAC,WAAW,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,EAAE,CAAC,CAAC;YAC/B,KAAI,CAAC,WAAW,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,QAAQ,CAAC,CAAC;YACnD,KAAI,CAAC,WAAW,CAAC,kBAAkB,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,QAAQ,CAAC,CAAC;YACzE,MAAM,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC;QACpB,CAAC,CAAC;aACF,KAAK,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC;IAElC,CAAC;IAEM,8BAAQ,GAAf,UAAgB,IAAW,EAAE,KAAY,EACrC,QAAe,EAAE,IAAW;QADhC,iBAoBC;QAjBA,OAAO,CAAC,GAAG,CAAC,wBAAwB,CAAC,CAAC;QACtC,IAAI,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC;YACzB,UAAU,EAAC,IAAI;YACf,OAAO,EAAC,KAAK;YACb,UAAU,EAAC,QAAQ;YACnB,UAAU,EAAC,IAAI,CAAC,QAAQ,EAAE;SAC1B,CAAC,CAAC;QACH,MAAM,CAAC,IAAI,CAAC,WAAW;aACrB,QAAQ,CAAC,WAAW,CAAC,WAAW,EAAC,IAAI,CAAC;aACtC,GAAG,CAAC,UAAC,IAAI;YACT,KAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,KAAK,CAAC,CAAC;YAC7C,KAAI,CAAC,WAAW,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,EAAE,CAAC,CAAC;YAC9C,KAAI,CAAC,WAAW,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,QAAQ,CAAC,CAAC;YACnD,KAAI,CAAC,WAAW,CAAC,kBAAkB,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,QAAQ,CAAC,CAAC;YAC1D,MAAM,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,EAAE,CAAC;QACvB,CAAC,CAAC;aACD,KAAK,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC;IAClC,CAAC;IACF,kBAAC;AAAD,CAAC,AA7CD,IA6CC;AA7CY,WAAW;IADvB,UAAU,EAAE;qCAGoB,WAAW;GAF/B,WAAW,CA6CvB;SA7CY,WAAW","sourcesContent":["import { Injectable } from '@angular/core';\nimport {HttpService} from \"./http.service\";\nimport {Observable} from \"rxjs\";\nimport {Response} from \"@angular/http\";\nimport {environment} from \"../../environments/environment\";\nimport {User} from \"../models/models\";\n\n@Injectable()\nexport class UserService {\n\n\tconstructor(private httpService:HttpService) { }\n\n\tpublic login(email:string, password:string):Observable<string>{\n\t\tconsole.log('service login start');\n\t\tvar user:Observable<User>;\n\t\tvar body = JSON.stringify({\n\t\t\t'email':email,\n\t\t\t'password':password\n\t\t});\n\t\treturn this.httpService\n\t\t\t.makePost(environment.loginUrl,body)\n\t\t\t.map((resp)=>{\n\t\t\t\t\tthis.httpService.setToken(resp.json().token);\n\t\t\t\t\tthis.httpService.setCurrentId(resp.json().id);\n                    this.httpService.setUserType(resp.json().userType);\n                    this.httpService.setCurrentUserName(resp.json().userName);\n\t\t\t\t\treturn resp.json();\n\t\t\t\t})\n\t\t\t.catch(HttpService.handleError);\n\n\t}\n\n\tpublic register(name:string, email:string,\n\t\t\t\t\tpassword:string, type:number):Observable<string>{\n\n\t\tconsole.log('service register start');\n\t\tvar body = JSON.stringify({\n\t\t\t'nickName':name,\n\t\t\t'email':email,\n\t\t\t'password':password,\n\t\t\t'userType':type.toString()\n\t\t});\n\t\treturn this.httpService\n\t\t\t.makePost(environment.registerUrl,body)\n\t\t\t.map((resp)=>{\n\t\t\t\tthis.httpService.setToken(resp.json().token);\n\t\t\t\tthis.httpService.setCurrentId(resp.json().id);\n\t\t\t\tthis.httpService.setUserType(resp.json().userType);\n\t\t\t\tthis.httpService.setCurrentUserName(resp.json().userName);\n\t\t\t\treturn resp.json().id;\n\t\t\t})\n\t\t\t.catch(HttpService.handleError);\n\t}\n}\n"]}